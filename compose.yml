services:
  vm-db:
    image: mariadb:11
    restart: unless-stopped
    environment:
      MARIADB_USER: &vmdbuser video
      MARIADB_PASSWORD: &vmdbpass videosecret
      MARIADB_ROOT_PASSWORD: iamroot
      MARIADB_DATABASE: &vmdbname videos
    healthcheck:
      # https://github.com/docker-library/healthcheck/blob/master/mysql/Dockerfile.mariadb
      test: [ 'CMD', 'healthcheck.sh', '--su=mysql', '--connect', '--innodb_initialized' ]
      timeout: 10s
      retries: 3
    volumes:
      - mariadb_vm_data:/var/lib/mysql
    ports:
      - 3306:3306
  thm-db:
    image: mariadb:11
    restart: unless-stopped
    environment:
      MARIADB_USER: &thmdbuser trendingHashtag
      MARIADB_PASSWORD: &thmdbpass hashtagSecret
      MARIADB_ROOT_PASSWORD: iamroot
      MARIADB_DATABASE: &thmdbname trendingHashtags
    volumes:
      - mariadb_thm_data:/var/lib/mysql
    healthcheck:
      test: [ 'CMD', 'healthcheck.sh', '--su=mysql', '--connect', '--innodb_initialized' ]
      timeout: 10s
      retries: 3
    ports:
      - 3307:3306
  sm-db:
    image: mariadb:11
    restart: unless-stopped
    environment:
      MARIADB_USER: &smdbuser subscriptions
      MARIADB_PASSWORD: &smdbpass subscriptionSecret
      MARIADB_ROOT_PASSWORD: iamroot
      MARIADB_DATABASE: &smdbname subscriptions
    volumes:
      - mariadb_sm_data:/var/lib/mysql
    healthcheck:
      test: [ 'CMD', 'healthcheck.sh', '--su=mysql', '--connect', '--innodb_initialized' ]
      timeout: 10s
      retries: 3
    ports:
      - 3308:3306
  vm:
    image: video-microservice:latest
    restart: unless-stopped
    environment:
      DB_USER: *vmdbuser
      DB_PASSWORD: *vmdbpass
      DB_HOST: vm-db
      DB_NAME: *vmdbname
      KAFKA_BOOTSTRAP_SERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      MICRONAUT_ENVIRONMENTS: prod
    ports:
      - 8080:8080
    healthcheck:
      test: curl -s http://vm:8080/health | grep -q 'Service running' || exit 1
      timeout: 10s
      retries: 3
    depends_on:
      vm-db:
        condition: service_healthy
      kafka-0:
        condition: service_healthy
      create-topics:
        condition: service_completed_successfully
  thm:
    image: trending-hashtag-microservice:latest
    restart: unless-stopped
    environment:
      DB_USER: *thmdbuser
      DB_PASSWORD: *thmdbpass
      DB_HOST: thm-db
      DB_NAME: *thmdbname
      KAFKA_BOOTSTRAP_SERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      MICRONAUT_ENVIRONMENTS: prod
    ports:
      - 8081:8080
    healthcheck:
      test: curl -s http://thm:8080/health | grep -q 'Service running' || exit 1
      timeout: 10s
      retries: 3
    depends_on:
      thm-db:
        condition: service_healthy
      kafka-0:
        condition: service_healthy
      create-topics:
        condition: service_completed_successfully

  sm:
    image: subscription-microservice:latest
    restart: unless-stopped
    environment:
      DB_USER: *smdbuser
      DB_PASSWORD: *smdbpass
      DB_HOST: sm-db
      DB_NAME: *smdbname
      KAFKA_BOOTSTRAP_SERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      MICRONAUT_ENVIRONMENTS: prod
    ports:
      - 8082:8080
    healthcheck:
      test: curl -s http://sm:8080/health | grep -q 'Service running' || exit 1
      timeout: 10s
      retries: 3
    depends_on:
      thm-db:
        condition: service_healthy
      kafka-0:
        condition: service_healthy
      create-topics:
        condition: service_completed_successfully

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9000:8080
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-0:9092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: 'true'

  kafka-0:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - 9094:9094
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Default topic settings
      - KAFKA_CFG_NUM_PARTITIONS=6
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      # JMX port for metrics
      - JMX_PORT=9997
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-0 -Dcom.sun.management.jmxremote.rmi.port=9997
    volumes:
      - kafka_0_data:/bitnami/kafka
    healthcheck:
      test: [ 'CMD-SHELL', 'unset KAFKA_JMX_OPTS; export JMX_PORT=9999; kafka-topics.sh --bootstrap-server localhost:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server localhost:9092 --topic hc --describe' ]
      timeout: 10s
      retries: 3


  kafka-1:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - 9095:9094
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Default topic settings
      - KAFKA_CFG_NUM_PARTITIONS=6
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      # JMX port for metrics
      - JMX_PORT=9997
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-1 -Dcom.sun.management.jmxremote.rmi.port=9997
    volumes:
      - kafka_1_data:/bitnami/kafka

  kafka-2:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - 9096:9094
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Default topic settings
      - KAFKA_CFG_NUM_PARTITIONS=6
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      # JMX port for metrics
      - JMX_PORT=9997
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-2 -Dcom.sun.management.jmxremote.rmi.port=9997
    volumes:
      - kafka_2_data:/bitnami/kafka
  #Create all topics prior to microservices starting. Adapted from https://github.com/confluentinc/kafka-streams-examples/blob/5.1.4-post/docker-compose.yml
  create-topics:
    image: docker.io/bitnami/kafka:3.5
    depends_on:
      kafka-0:
        condition: service_started
    command: "bash -c 'kafka-topics.sh --bootstrap-server kafka-0:9092 --create --topic video-viewed --if-not-exists && \
                       kafka-topics.sh --bootstrap-server kafka-0:9092 --create --topic video-posted --if-not-exists && \
                       kafka-topics.sh --bootstrap-server kafka-0:9092 --create --topic user-registered --if-not-exists && \
                       kafka-topics.sh --bootstrap-server kafka-0:9092 --create --topic video-liked --if-not-exists'"

  # Web-based viewer of C4 models using the Structurizr DSL
  structurizr:
    image: structurizr/lite:latest
    ports:
      - 3000:8080
    volumes:
      - ./docs/structurizr:/usr/local/structurizr

volumes:
  mariadb_vm_data:
  mariadb_thm_data:
  mariadb_sm_data:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data: