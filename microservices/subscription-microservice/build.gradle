plugins {
	id("io.micronaut.application") version "4.0.4"
	id("io.micronaut.test-resources") version "4.0.4"
	id("io.micronaut.aot") version "4.0.4"
}

version = "0.1"
group = "com.eng2.assessment.sm"

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor("io.micronaut.data:micronaut-data-processor")
	annotationProcessor("io.micronaut:micronaut-http-validation")
	annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
	implementation("io.micronaut.data:micronaut-data-hibernate-jpa:4.3.1")
	implementation("io.micronaut.kafka:micronaut-kafka")
	implementation("io.micronaut.serde:micronaut-serde-jackson")
	implementation("io.micronaut.sql:micronaut-jdbc-hikari")
	implementation(project(":microservices:generated-shared"))
	compileOnly("io.micronaut:micronaut-http-client")
	runtimeOnly("ch.qos.logback:logback-classic:1.4.14")
	runtimeOnly("org.mariadb.jdbc:mariadb-java-client")
	runtimeOnly("org.yaml:snakeyaml")
	testImplementation("io.micronaut:micronaut-http-client")
	testImplementation("org.assertj:assertj-core:3.24.2")
	testImplementation("org.mockito:mockito-core:5.6.0")
	testImplementation("org.mockito:mockito-junit-jupiter:5.6.0")
	testImplementation("org.junit.jupiter:junit-jupiter-params:5.10.0")
	testImplementation(project(":microservices:generated-shared"))

	//address docker scout vulnerabilities
	implementation ('org.xerial.snappy:snappy-java:1.1.10.5')
	implementation ('io.netty:netty-handler:4.1.102.Final')
}


application {
	mainClass.set("com.eng2.assessment.sm.Application")
}

graalvmNative.toolchainDetection = false
micronaut {
	runtime("netty")
	testRuntime("junit5")
	processing {
		incremental(true)
		annotations("com.eng2.assessment.sm.*")
	}
	aot {
		// Please review carefully the optimizations enabled below
		// Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
		optimizeServiceLoading = false
		convertYamlToJava = false
		precomputeOperations = true
		cacheEnvironment = true
		optimizeClassLoading = true
		deduceEnvironment = true
		optimizeNetty = true
	}
}

sourceSets {
	main{
		java{
			srcDir "build/generated/egx"
		}
	}
}


run{
	systemProperties([
		'datasources.default.url': 'jdbc:mariadb://localhost:3308/subscriptions',
		'datasources.default.username': 'subscriptions',
		'datasources.default.password': 'subscriptionSecret',
		'kafka.bootstrap.servers': 'localhost:9094,localhost:9095,localhost:9096',
		'micronaut.server.port': '8082',

	])
}

tasks.named("dockerfile") {
	baseImage "eclipse-temurin:17-alpine" // a newer version of a JDK image, with less vulnerabilities than the default openjdk
	instruction """RUN apk --no-cache add curl""" // Add curl to the alpine base image to enable self-pings for healthchecks
}

jar{
	exclude("logback.xml") // do not include the logback config in the jar. This prevents warnings when running projects that depend on each other
}


tasks.register("prepareKotlinBuildScriptModel"){}


