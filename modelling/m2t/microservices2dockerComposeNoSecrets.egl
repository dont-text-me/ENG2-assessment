services:
[%for (microservice in s.services){%]
  [%=microservice.name.getMicroserviceAcronym()%]-db:
    image: mariadb:11
    restart: unless-stopped
    healthcheck:
      # https://github.com/docker-library/healthcheck/blob/master/mysql/Dockerfile.mariadb
      test: [ 'CMD', 'healthcheck.sh', '--su=mysql', '--connect', '--innodb_initialized' ]
      timeout: 10s
      retries: 3
    volumes:
      - mariadb_[%=microservice.name.getMicroserviceAcronym()%]_data:/var/lib/mysql
  [%=microservice.name.getMicroserviceAcronym()%]:
    image: [%=microservice.name%]:latest
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      MICRONAUT_ENVIRONMENTS: prod
    ports:
      - [%=microservice.dockerComposePortForwardValue%]:8080
    healthcheck:
      test: curl -s http://[%=microservice.name.getMicroserviceAcronym()%]:8080/health | grep -q 'Service running' || exit 1
      timeout: 10s
      retries: 3
    depends_on:
      [%=microservice.name.getMicroserviceAcronym()%]-db:
        condition: service_healthy
      kafka-0:
        condition: service_healthy
      create-topics:
        condition: service_completed_successfully
[%}%]
  kafka-0:
    image: docker.io/bitnami/kafka:3.6.1
    ports:
      - 9094:9094
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Default topic settings
      - KAFKA_CFG_NUM_PARTITIONS=6
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      # JMX port for metrics
      - JMX_PORT=9997
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-0 -Dcom.sun.management.jmxremote.rmi.port=9997
    volumes:
      - kafka_0_data:/bitnami/kafka
    healthcheck:
      test: [ 'CMD-SHELL', 'unset KAFKA_JMX_OPTS; export JMX_PORT=9999; kafka-topics.sh --bootstrap-server localhost:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server localhost:9092 --topic hc --describe' ]
      timeout: 10s
      retries: 3


  kafka-1:
    image: docker.io/bitnami/kafka:3.6.1
    ports:
      - 9095:9094
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Default topic settings
      - KAFKA_CFG_NUM_PARTITIONS=6
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      # JMX port for metrics
      - JMX_PORT=9997
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-1 -Dcom.sun.management.jmxremote.rmi.port=9997
    volumes:
      - kafka_1_data:/bitnami/kafka

  kafka-2:
    image: docker.io/bitnami/kafka:3.6.1
    ports:
      - 9096:9094
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Default topic settings
      - KAFKA_CFG_NUM_PARTITIONS=6
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      # JMX port for metrics
      - JMX_PORT=9997
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-2 -Dcom.sun.management.jmxremote.rmi.port=9997
    volumes:
      - kafka_2_data:/bitnami/kafka

  #Create all topics prior to microservices starting. Adapted from https://github.com/confluentinc/kafka-streams-examples/blob/5.1.4-post/docker-compose.yml
  create-topics:
    image: docker.io/bitnami/kafka:3.6.1
    depends_on:
      kafka-0:
        condition: service_healthy
    command: "bash -c '[%=s.topics.name.collect(topic | "kafka-topics.sh --bootstrap-server kafka-0:9092 --create --topic " + topic + " --if-not-exists").concat(" && " + "\\\\".substring(1) + "\n")%]'"

  # Web-based viewer of C4 models using the Structurizr DSL
  structurizr:
    image: structurizr/lite:latest
    ports:
      - 3000:8080
    volumes:
      - ./docs/structurizr:/usr/local/structurizr

volumes:
[%for (microservice in s.services){%]
  mariadb_[%=microservice.name.getMicroserviceAcronym()%]_data:
[%}%]
[%for (brokerNum in Sequence{0..s.kafkaBrokerCount - 1}){%]
  kafka_[%=brokerNum%]_data:
[%}%]



[%
operation String getMicroserviceAcronym(){
    return self.split("-").collect(it | it.characterAt(0)).concat();
}
%]