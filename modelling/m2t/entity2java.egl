package [%=packageName%];
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.micronaut.serde.annotation.Serdeable;
import java.time.Instant;
import jakarta.persistence.*;
import java.util.*;

@Entity
@Serdeable
public class [%=e.name%] {

	[*Generate ID field with micronaut-conforming annotations*]

	@Id
	[%if (e.idField.isAutoGenerated){%]
	@GeneratedValue
	[%}%]
	private [%=e.idField.type%] [%=e.idField.name%];
	
	public [%=e.idField.type%] get[%=e.idField.name.ftuc()%](){return this.[%=e.idField.name%];}
	
	public void set[%=e.idField.name.ftuc()%]([%=e.idField.type%] newId){this.[%=e.idField.name%] = newId;}

[* Generate entity-specific fields i.e. ones that are not part of any relationship *]
	[%for (field in e.fields){%]
	@Column(nullable = [%=field.isNullable%], unique = [%=field.isUnique%])
	private [%=field.type%] [%=field.name%];
	
	public [%=field.type%] get[%=field.name.ftuc()%](){return this.[%=field.name%];}
	
	public void set[%=field.name.ftuc()%]([%=field.type%] newValue){this.[%=field.name%] = newValue;}
	
	[%}%]
	[*Generate incoming transitions (with mappedBy value coming from the name of the field the transition comes from)*]
	[%for (incomingRel in e.incoming){%]
		[%if (incomingRel.toField?.name != null){%]
	[%if (incomingRel.isJsonIgnoreTo){%]
	@JsonIgnore
	[%}%]
	[%=incomingRel.type.toString().toAnnotationString(false)%](mappedBy = "[%=incomingRel.fromField.name%]")
	private [%=incomingRel.toField.type%] [%=incomingRel.toField.name%];
	
	public [%=incomingRel.toField.type%] get[%=incomingRel.toField.name.ftuc()%](){return this.[%=incomingRel.toField.name%];}
	
	public void set[%=incomingRel.toField.name.ftuc()%]([%=incomingRel.toField.type%] newValue){this.[%=incomingRel.toField.name%] = newValue;}
	
		[%}%]
	[%}%]
	[*Generate outgoing transitions (without mappedBy)*]
	
	[%for (outgoingRel in e.outgoing){%]
		[%if (outgoingRel.fromField?.name != null){%]
	[%=outgoingRel.type.toString().toAnnotationString(true)%]
	[%if (outgoingRel.isJsonIgnoreFrom){%]
	@JsonIgnore
	[%}%]
	[%if(outgoingRel.joinTableName != null and outgoingRel.joinTableName != ""){%]
	@JoinTable(name = "[%=outgoingRel.joinTableName%]")
	[%}%]
	private [%=outgoingRel.fromField.type%] [%=outgoingRel.fromField.name%];
	
	public [%=outgoingRel.fromField.type%] get[%=outgoingRel.fromField.name.ftuc()%](){return this.[%=outgoingRel.fromField.name%];}
	
	public void set[%=outgoingRel.fromField.name.ftuc()%]([%=outgoingRel.fromField.type%] newValue){this.[%=outgoingRel.fromField.name%] = newValue;}
		[%}%]
	[%}%]
}


[%
//Convert entity relationship type to micronaut annotation
operation String toAnnotationString(isFrom : Boolean){
	if (self == "MANY_TO_ONE"){
		if(isFrom){
		return "@ManyToOne";
		}
		else{
			return "@OneToMany";
		}
	}
	if (self == "ONE_TO_MANY"){
		if(isFrom){
		return "@OneToMany";
		}
		else{
			return "@ManyToOne";
		}
	}
	else{
		return "@ManyToMany";
	}
}
%]
